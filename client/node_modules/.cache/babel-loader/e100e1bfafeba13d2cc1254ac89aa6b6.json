{"ast":null,"code":"var _jsxFileName = \"/Users/macbookpro/Desktop/becode/repos/merng/client/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { ApolloClient } from \"apollo-client\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport { ApolloLink } from \"apollo-link\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { onError } from 'apollo-link-error';\nimport Notifications, { notify } from 'react-notify-toast';\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport dotenv from 'dotenv'; // import './index.css';\n\nimport App from './App'; // import * as serviceWorker from \"./serviceWorker\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ndotenv.config();\nconst errorLink = onError(({\n  graphQLErrors\n}) => {\n  if (graphQLErrors) graphQLErrors.map(({\n    message\n  }) => notify.show(message, 'error'));\n}); // TODO fix the .env client side\n\nconst httpLink = createHttpLink({\n  uri: 'http://localhost:4300/graphql'\n}); // const httpLink = createHttpLink({ uri: `http://localhost:${process.env.PORT_SERVER}/graphql` });\n\nconst link = ApolloLink.from([errorLink, httpLink]);\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache()\n});\nReactDOM.render( /*#__PURE__*/_jsxDEV(ApolloProvider, {\n  client: client,\n  children: /*#__PURE__*/_jsxDEV(ChakraProvider, {\n    children: [/*#__PURE__*/_jsxDEV(Notifications, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 33,\n  columnNumber: 3\n}, this), document.getElementById(\"root\")); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();","map":{"version":3,"sources":["/Users/macbookpro/Desktop/becode/repos/merng/client/src/index.js"],"names":["React","ReactDOM","ApolloProvider","ApolloClient","createHttpLink","ApolloLink","InMemoryCache","onError","Notifications","notify","ChakraProvider","dotenv","App","config","errorLink","graphQLErrors","map","message","show","httpLink","uri","link","from","client","cache","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,cAAT,QAA+B,qBAA/B;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,UAAT,QAA2B,aAA3B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,OAAOC,aAAP,IAAuBC,MAAvB,QAAoC,oBAApC;AACA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,OAAOC,MAAP,MAAmB,QAAnB,C,CACA;;AACA,OAAOC,GAAP,MAAgB,OAAhB,C,CACA;;;AAEAD,MAAM,CAACE,MAAP;AAEA,MAAMC,SAAS,GAAGP,OAAO,CAAC,CAAC;AAAEQ,EAAAA;AAAF,CAAD,KAAuB;AAC/C,MAAIA,aAAJ,EAAmBA,aAAa,CAACC,GAAd,CAAkB,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAiBR,MAAM,CAACS,IAAP,CAAYD,OAAZ,EAAqB,OAArB,CAAnC;AACpB,CAFwB,CAAzB,C,CAGA;;AACA,MAAME,QAAQ,GAAGf,cAAc,CAAC;AAAEgB,EAAAA,GAAG,EAAE;AAAP,CAAD,CAA/B,C,CACA;;AACA,MAAMC,IAAI,GAAGhB,UAAU,CAACiB,IAAX,CAAgB,CAACR,SAAD,EAAYK,QAAZ,CAAhB,CAAb;AAEA,MAAMI,MAAM,GAAG,IAAIpB,YAAJ,CAAiB;AAC9BkB,EAAAA,IAD8B;AAE9BG,EAAAA,KAAK,EAAE,IAAIlB,aAAJ;AAFuB,CAAjB,CAAf;AAKAL,QAAQ,CAACwB,MAAT,eACE,QAAC,cAAD;AAAgB,EAAA,MAAM,EAAEF,MAAxB;AAAA,yBACE,QAAC,cAAD;AAAA,4BACE,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,QADF,EAOEG,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAPF,E,CAUA;AACA;AACA;AAEA","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { ApolloClient } from \"apollo-client\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport { ApolloLink } from \"apollo-link\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { onError } from 'apollo-link-error'\nimport Notifications, {notify} from 'react-notify-toast';\nimport { ChakraProvider } from \"@chakra-ui/react\";\n\nimport dotenv from 'dotenv';\n// import './index.css';\nimport App from './App';\n// import * as serviceWorker from \"./serviceWorker\";\n\ndotenv.config();\n\nconst errorLink = onError(({ graphQLErrors }) => {\n  if (graphQLErrors) graphQLErrors.map(({ message }) => notify.show(message, 'error'))\n})\n// TODO fix the .env client side\nconst httpLink = createHttpLink({ uri: 'http://localhost:4300/graphql' });\n// const httpLink = createHttpLink({ uri: `http://localhost:${process.env.PORT_SERVER}/graphql` });\nconst link = ApolloLink.from([errorLink, httpLink]);\n\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache()\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <ChakraProvider>\n      <Notifications />\n      <App />\n    </ChakraProvider>\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n// serviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}